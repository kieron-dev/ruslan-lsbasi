// Code generated by counterfeiter. DO NOT EDIT.
package interpreterfakes

import (
	"sync"

	"github.com/kieron-dev/lsbasi/interpreter"
	"github.com/kieron-dev/lsbasi/parser"
)

type FakeProgrammer struct {
	ProgramStub        func() (parser.ASTNode, error)
	programMutex       sync.RWMutex
	programArgsForCall []struct {
	}
	programReturns struct {
		result1 parser.ASTNode
		result2 error
	}
	programReturnsOnCall map[int]struct {
		result1 parser.ASTNode
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeProgrammer) Program() (parser.ASTNode, error) {
	fake.programMutex.Lock()
	ret, specificReturn := fake.programReturnsOnCall[len(fake.programArgsForCall)]
	fake.programArgsForCall = append(fake.programArgsForCall, struct {
	}{})
	stub := fake.ProgramStub
	fakeReturns := fake.programReturns
	fake.recordInvocation("Program", []interface{}{})
	fake.programMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeProgrammer) ProgramCallCount() int {
	fake.programMutex.RLock()
	defer fake.programMutex.RUnlock()
	return len(fake.programArgsForCall)
}

func (fake *FakeProgrammer) ProgramCalls(stub func() (parser.ASTNode, error)) {
	fake.programMutex.Lock()
	defer fake.programMutex.Unlock()
	fake.ProgramStub = stub
}

func (fake *FakeProgrammer) ProgramReturns(result1 parser.ASTNode, result2 error) {
	fake.programMutex.Lock()
	defer fake.programMutex.Unlock()
	fake.ProgramStub = nil
	fake.programReturns = struct {
		result1 parser.ASTNode
		result2 error
	}{result1, result2}
}

func (fake *FakeProgrammer) ProgramReturnsOnCall(i int, result1 parser.ASTNode, result2 error) {
	fake.programMutex.Lock()
	defer fake.programMutex.Unlock()
	fake.ProgramStub = nil
	if fake.programReturnsOnCall == nil {
		fake.programReturnsOnCall = make(map[int]struct {
			result1 parser.ASTNode
			result2 error
		})
	}
	fake.programReturnsOnCall[i] = struct {
		result1 parser.ASTNode
		result2 error
	}{result1, result2}
}

func (fake *FakeProgrammer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.programMutex.RLock()
	defer fake.programMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeProgrammer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interpreter.Programmer = new(FakeProgrammer)
