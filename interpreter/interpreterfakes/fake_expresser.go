// Code generated by counterfeiter. DO NOT EDIT.
package interpreterfakes

import (
	"sync"

	"github.com/kieron-dev/lsbasi/interpreter"
	"github.com/kieron-dev/lsbasi/parser"
)

type FakeExpresser struct {
	ExprStub        func() (parser.ASTNode, error)
	exprMutex       sync.RWMutex
	exprArgsForCall []struct {
	}
	exprReturns struct {
		result1 parser.ASTNode
		result2 error
	}
	exprReturnsOnCall map[int]struct {
		result1 parser.ASTNode
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExpresser) Expr() (parser.ASTNode, error) {
	fake.exprMutex.Lock()
	ret, specificReturn := fake.exprReturnsOnCall[len(fake.exprArgsForCall)]
	fake.exprArgsForCall = append(fake.exprArgsForCall, struct {
	}{})
	stub := fake.ExprStub
	fakeReturns := fake.exprReturns
	fake.recordInvocation("Expr", []interface{}{})
	fake.exprMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeExpresser) ExprCallCount() int {
	fake.exprMutex.RLock()
	defer fake.exprMutex.RUnlock()
	return len(fake.exprArgsForCall)
}

func (fake *FakeExpresser) ExprCalls(stub func() (parser.ASTNode, error)) {
	fake.exprMutex.Lock()
	defer fake.exprMutex.Unlock()
	fake.ExprStub = stub
}

func (fake *FakeExpresser) ExprReturns(result1 parser.ASTNode, result2 error) {
	fake.exprMutex.Lock()
	defer fake.exprMutex.Unlock()
	fake.ExprStub = nil
	fake.exprReturns = struct {
		result1 parser.ASTNode
		result2 error
	}{result1, result2}
}

func (fake *FakeExpresser) ExprReturnsOnCall(i int, result1 parser.ASTNode, result2 error) {
	fake.exprMutex.Lock()
	defer fake.exprMutex.Unlock()
	fake.ExprStub = nil
	if fake.exprReturnsOnCall == nil {
		fake.exprReturnsOnCall = make(map[int]struct {
			result1 parser.ASTNode
			result2 error
		})
	}
	fake.exprReturnsOnCall[i] = struct {
		result1 parser.ASTNode
		result2 error
	}{result1, result2}
}

func (fake *FakeExpresser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exprMutex.RLock()
	defer fake.exprMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExpresser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ interpreter.Expresser = new(FakeExpresser)
